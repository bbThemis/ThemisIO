
Basic Usage: 
/usr/local/bin/ibrun ./executable <executable_opions>

In normal usage, pass only the MPI executable name and any
options the executable requires.


Advanced Usage:
/usr/local/bin/ibrun -n <number of processors> -o <offset into processor hostlist> executable <execuable_opions>

In this case you can specify a subset of processors from the
list of all hosts on which to run the executable, and an offset into the list
of processors to start numbering.  This allows you to e.g. launch two different
exectuables on two different subsets of the available hosts.

For example, the following  batch environment will allocate 
 two nodes with 56 tasks per node: 
   #$ -n 112
   #$ -N 2 

 We can run two independent jobs on each node:
 /usr/local/bin/ibrun -n 56 -o 0  ./mpihello &
 /usr/local/bin/ibrun -n 56 -o 56 ./mpihello &
 wait

The first call launches a 56-task job on the first 56 cores in the hostfile,
The second call launches a 56-task job on the second 56 cores in the hostfile.
The shell 'wait' command waits for all processes to finish before the shell exits.
 
To disable ibrun standard output, set the following environment variable:
 bash:   export IBRUN_QUIET=1
 tcsh:   setenv IBRUN_QUIET 1
This will not disable error messages. 
 
To change only the total number of tasks you may use -np or -n: 
/usr/local/bin/ibrun [-n|-np] <number of tasks> executable <executable_options>
  NOTE:  This will not change the number of tasks per node 
 
To change the number of tasks per node you must set IBRUN_TASKS_PER_NODE 
 bash:   export IBRUN_TASKS_PER_NODE=8
 tcsh:   setenv IBRUN_TASKS_PER_NODE 8
  NOTE:  This will change the default number of total tasks to: 
    $IBRUN_TASKS_PER_NODE x # of nodes
 
ERROR: Do not run /usr/local/bin/ibrun on the login node!
       It must be run on a compute node.
